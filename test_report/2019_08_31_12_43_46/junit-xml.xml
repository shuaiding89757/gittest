<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skipped="0" tests="7" time="51.760"><testcase classname="test_dir.test_baidu.TestSearch" file="test_dir\test_baidu.py" line="11" name="test_baidu_search_case" time="17.857"></testcase><testcase classname="test_dir.test_baidu.TestSearch" file="test_dir\test_baidu.py" line="28" name="test_baidu_search[case1]" time="4.235"></testcase><testcase classname="test_dir.test_baidu.TestSearch" file="test_dir\test_baidu.py" line="28" name="test_baidu_search[case2]" time="2.339"></testcase><testcase classname="test_dir.test_baidu.TestSearch" file="test_dir\test_baidu.py" line="28" name="test_baidu_search[case3]" time="2.328"></testcase><testcase classname="test_dir.test_baidu.TestSearchSettings" file="test_dir\test_baidu.py" line="48" name="test_baidu_search_setting" time="15.922"><failure message="selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 已经记录下您的使用偏好
Message: unexpected alert open: {Alert text : 已经记录下您的使用偏好}
  (Session info: chrome=76.0.3809.100)">self = &lt;test_dir.test_baidu.TestSearchSettings object at 0x045194D0&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;f3f890d1e9c46b119cd9ec0fdecd02e6&quot;)&gt;
base_url = &apos;https://www.baidu.com&apos;

    def test_baidu_search_setting(self, browser, base_url):
        &quot;&quot;&quot;
        名称：百度搜索设置
        步骤：
        1、打开百度浏览器
        2、点击设置链接
        3、在下拉框中&quot;选择搜索&quot;
        4、点击&quot;保存设置&quot;
        5、对弹出警告框保存
        检查点：
        * 检查是否弹出提示框
        &quot;&quot;&quot;
        page = BaiduPage(browser)
        page.get(base_url)
        page.settings.click()
        page.search_setting.click()
        sleep(2)
&gt;       page.save_setting.click()

test_dir\test_baidu.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
D:\python\Python\Python37-32\lib\site-packages\poium\page_objects.py:142: in __get__
    return self.find(context)
D:\python\Python\Python37-32\lib\site-packages\poium\page_objects.py:125: in find
    if self.get_element(context) is not None:
D:\python\Python\Python37-32\lib\site-packages\poium\page_objects.py:112: in get_element
    elem = context.find_element(*self.locator)
D:\python\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\webdriver.py:978: in find_element
    &apos;value&apos;: value})[&apos;value&apos;]
D:\python\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x039789D0&gt;
response = {&apos;status&apos;: 500, &apos;value&apos;: &apos;{&quot;value&quot;:{&quot;data&quot;:{&quot;text&quot;:&quot;已经记录下您的使用偏好&quot;},&quot;error&quot;:&quot;unexpected alert open&quot;,&quot;message&quot;:&quot;unexpecte...jectPath [0x77D6662D+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x77D665FD+189]\\n\\t(No symbol) [0x00000000]\\n&quot;}}&apos;}

    def check_response(self, response):
        &quot;&quot;&quot;
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        &quot;&quot;&quot;
        status = response.get(&apos;status&apos;, None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get(&quot;message&quot;, &quot;&quot;)
        screen = response.get(&quot;screen&quot;, &quot;&quot;)
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get(&apos;value&apos;, None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value[&apos;value&apos;]
                    status = value.get(&apos;error&apos;, None)
                    if status is None:
                        status = value[&quot;status&quot;]
                        message = value[&quot;value&quot;]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get(&apos;message&apos;)
                    else:
                        message = value.get(&apos;message&apos;, None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == &apos;&apos; or value is None:
            value = response[&apos;value&apos;]
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == &quot;&quot; and &apos;message&apos; in value:
            message = value[&apos;message&apos;]
    
        screen = None
        if &apos;screen&apos; in value:
            screen = value[&apos;screen&apos;]
    
        stacktrace = None
        if &apos;stackTrace&apos; in value and value[&apos;stackTrace&apos;]:
            stacktrace = []
            try:
                for frame in value[&apos;stackTrace&apos;]:
                    line = self._value_or_default(frame, &apos;lineNumber&apos;, &apos;&apos;)
                    file = self._value_or_default(frame, &apos;fileName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if line:
                        file = &quot;%s:%s&quot; % (file, line)
                    meth = self._value_or_default(frame, &apos;methodName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if &apos;className&apos; in frame:
                        meth = &quot;%s.%s&quot; % (frame[&apos;className&apos;], meth)
                    msg = &quot;    at %s (%s)&quot;
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if &apos;data&apos; in value:
                alert_text = value[&apos;data&apos;].get(&apos;text&apos;)
            elif &apos;alert&apos; in value:
                alert_text = value[&apos;alert&apos;].get(&apos;text&apos;)
&gt;           raise exception_class(message, screen, stacktrace, alert_text)
E           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 已经记录下您的使用偏好
E           Message: unexpected alert open: {Alert text : 已经记录下您的使用偏好}
E             (Session info: chrome=76.0.3809.100)

D:\python\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\errorhandler.py:241: UnexpectedAlertPresentException</failure></testcase><testcase classname="test_dir.test_parametrize" file="test_dir\test_parametrize.py" line="19" name="test_baidu_search[1-Selenium]" time="2.214"></testcase><testcase classname="test_dir.test_parametrize" file="test_dir\test_parametrize.py" line="19" name="test_baidu_search[2-poium]" time="4.376"></testcase></testsuite>